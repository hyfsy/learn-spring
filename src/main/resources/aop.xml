<?xml version='1.0' encoding='UTF-8'?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountService" class="com.hyf.spring.aop.xml.service.AccountServiceImpl" />

    <bean id="logger" class="com.hyf.spring.aop.xml.Logger" />


    <!-- 配置aop -->
    <aop:config>

        <!--
            spring中基于XML的AOP配置步骤：
                1、把通知Bean交给spring来管理
                2、使用aop:config标签表明开始AOP的配置
                3、使用aop:aspect标签表明配置一个切面
                    id属性：是给切面提供一个唯一标识
                    ref属性：是指定通知类bean的Id
                4、在aop:aspect标签的内部使用对应标签来配置通知的类型
                    aop:pointcut：表示配置一个接入点表达式，可定义在aop:aspect中或者aop:config，作用范围不同
                    aop:before：表示配置前置通知
                        method：用于指定切面引用类的哪个方法是前置通知
                        pointcut：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
                        pointcut-ref：引用aop:pointcut标签配置的表达式
                            切入点表达式的写法：
                            关键字：execution(表达式)等
                            表达式:访问修饰符 返回值 包名.包名.包名…类名.方法名(参数列表)
                            标准的表达式写法：public void com.hyf.spring.aop.xml.service.AccountServicelmpl.printAccount(java.lang.Integer)
                                访问修饰符可以省略
                                    void com.hyf.spring.aop.xml.service.AccountServicelmpl.printAccount(java.lang.Integer)
                                返回值可以使用通配符表示任意返回值
                                    * com.hyf.spring.aop.xml.service.AccountServicelmpl.printAccount(java.lang.Integer)
                                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.*
                                    * *.*.*.*.*.*.AccountServicelmpl.printAccount(java.lang.Integer)
                                包名可以使用..表示当前包及其子包
                                    * *..AccountServicelmpl.printAccount()
                                类名和方法可以使用*通配
                                    * *..*.*(java.lang.Integer)
                                参数列表：
                                    基本类型直接写名称           int
                                    引用类型写包名.类名的方式     java.lang.String

                                    可以使用*表示任意类型，但是必须有参数
                                    可以使用..表示有无参数均可，有参数可以是任意类型
                                全通配写法：
                                    * *..*.*(..)
                            实际开发中切入点表达式的通常写法：切到业务层实现类下的所有方法
        -->

        <!-- 配置切面 -->
        <aop:aspect id="loggerAdvice" ref="logger">

            <!-- 建立通知方法和切入点方法的连接 -->

            <!-- 定义切点表达式 -->
            <aop:pointcut id="pc1" expression="execution(* com.hyf.spring.aop.xml.service.*.*(..))" />

            <!-- 前置通知 -->
            <aop:before method="loggerBefore" pointcut-ref="pc1" />
            <!-- 后置通知 -->
            <aop:after-returning method="loggerAfterReturning" pointcut-ref="pc1" />
            <!-- 异常通知 -->
            <aop:after-throwing method="loggerAfterThrowing" pointcut-ref="pc1" />
            <!-- 最终通知 -->
            <aop:after method="loggerAfter" pointcut-ref="pc1" />

            <!-- 环绕通知 -->
            <aop:around method="loggerAround" pointcut-ref="pc1" />
        </aop:aspect>
    </aop:config>

</beans>